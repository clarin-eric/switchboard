name: CI

on:
  push:
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
  schedule:
  - cron: "23 4 12 * *"

jobs:
  run_check:
    name: Check for duplicate wokflows
    runs-on: ubuntu-18.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}
          do_not_skip: '["release", "workflow_dispatch", "schedule"]'
  build:
    needs: [run_check]
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: '50'
      - name: Get the version
        id: get_version
        run: |
          echo ${GITHUB_REF}
          echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      - name: Build
        run: |
          make package
          cp build/switchboard.tar.gz build/switchboard-${{ steps.get_version.outputs.VERSION }}.tar.gz
      - name: Upload build package
        uses: actions/upload-artifact@v2
        with:
          name: build-package
          path: build/switchboard-${{ steps.get_version.outputs.VERSION }}.tar.gz

  release:
    needs: [run_check, build]
    if: needs.pre_job.outputs.should_skip != 'true' && (github.event_name == 'release' || github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
    runs-on: ubuntu-18.04
    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
    - name: Download build package from build job
      uses: actions/download-artifact@v2
      with:
        name: build-package
    # For releases created via GitHub webUI
    - name: Upload binaries to existing release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./switchboard-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_name: switchboard-${{ steps.get_version.outputs.VERSION }}.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
    # Create a release when a tag is pushed to the repository
    # Skip if tag is from pre created release
    - name: Check if release already exists for this tag
      if: github.event_name == 'push'
      id: get_release
      run: |
        URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.VERSION }}"
        StatusCode=$(curl -o -I -L -s -w "%{http_code}" -X GET -G $URL)
        if [ "$StatusCode" == 200 ]; then
          echo "Release exists"
          echo ::set-output name=RELEASETAG::true
        else
          echo "Release does not exist yet"
          echo ::set-output name=RELEASETAG::false
        fi
    - name: Create prelease for this tag
      if: github.event_name == 'push' && steps.get_release.outputs.RELEASETAG == false
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: true
        prerelease: true
    - uses: actions/upload-release-asset@v1.0.1
      if: github.event_name == 'push' && steps.get_release.outputs.RELEASETAG == false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./switchboard-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_name: switchboard-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_content_type: application/tar+gzip
    - uses: eregon/publish-release@v1
      if: github.event_name == 'push' && steps.get_release.outputs.RELEASETAG == false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
