name: CI

on:
  push:
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
  schedule:
  - cron: "23 4 12 * *"

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      release_tag: ${{ steps.release_tag.outputs.RELEASETAG }}
    steps:
      - name: Get the version
        id: get_version
        run: |
          echo ${GITHUB_REF}
          echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      - name: Check tag's target release
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        run: |
          URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.VERSION }}"
          StatusCode=$(curl -o -I -L -s -w "%{http_code}" -X GET -G $URL)
          if [ "$StatusCode" == 200 ]; then
            echo "Release exists"
            echo ::set-output name=RELEASETAG::true
          else
            echo "Release does not exist"
            echo ::set-output name=RELEASETAG::false
          fi
  build:
    needs: [prepare]
    # for: releases, pushes that are not tag, and tag pushes without release
    if: github.event_name == 'release' || !contains(github.ref, 'refs/tags/') || needs.prepare.outputs.release_tag == false
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: '50'
      - name: Build
        run: |
          echo ${{ needs.prepare.outputs.release_tag }}
          make package
          cp build/switchboard.tar.gz build/switchboard-${{ needs.prepare.outputs.version }}.tar.gz
      - name: Upload build package
        uses: actions/upload-artifact@v2
        with:
          name: build-package
          path: build/switchboard-${{ needs.prepare.outputs.VERSION }}.tar.gz

  release:
    needs: [prepare, build]
    if: github.event_name == 'release' || needs.prepare.outputs.release_tag == false
    runs-on: ubuntu-18.04
    steps:
    - name: Download build package from build job
      uses: actions/download-artifact@v2
      with:
        name: build-package
    # For releases created via GitHub webUI
    - name: Upload binaries to existing release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./switchboard-${{ needs.prepare.outputs.VERSION }}.tar.gz
        asset_name: switchboard-${{ needs.prepare.outputs.VERSION }}.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
    # Create a release when a tag is pushed to the repository
    # Skip if tag is from pre created release
    - name: Create prelease for this tag
      if: needs.prepare.outputs.release_tag == false
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare.outputs.VERSION }}
        release_name: Release ${{ needs.prepare.outputs.VERSION }}
        draft: true
        prerelease: true
    - uses: actions/upload-release-asset@v1.0.1
      if: needs.prepare.outputs.release_tag == false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./switchboard-${{ needs.prepare.outputs.VERSION }}.tar.gz
        asset_name: switchboard-${{ needs.prepare.outputs.VERSION }}.tar.gz
        asset_content_type: application/tar+gzip
    - uses: eregon/publish-release@v1
      if: needs.prepare.outputs.release_tag == false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
